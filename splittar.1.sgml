<!doctype refentry PUBLIC "-//OASIS//DTD DocBook V4.1//EN" [

<!-- Process this file with docbook-to-man to generate an nroff manual
     page: `docbook-to-man manpage.sgml > manpage.1'.  You may view
     the manual page with: `docbook-to-man manpage.sgml | nroff -man |
     less'.  A typical entry in a Makefile or Makefile.am is:

manpage.1: manpage.sgml
	docbook-to-man $< > $@
  -->

<!-- This example was constructed by Colin Watson
     <email>cjwatson@debian.org</email>, based on a man page template
     provided by Tom Christiansen <email>tchrist@jhereg.perl.com</email>
     and a DocBook man page example by Craig Small
     <email>csmall@debian.org</email>.
  -->

  <!-- Fill in the various UPPER CASE things here. -->
  <!ENTITY manfirstname "<firstname>Chris</firstname>">
  <!ENTITY mansurname   "<surname>AtLee</surname>">
  <!-- Please adjust the date whenever revising the manpage. -->
  <!ENTITY mandate      "<date>Jan 25, 2006</date>">
  <!-- SECTION should be 1-8, maybe with subsection. Other parameters are
       allowed: see man(7), man(1). -->
  <!ENTITY mansection   "<manvolnum>1</manvolnum>">
  <!ENTITY manemail     "<email>chris@atlee.ca</email>">
  <!ENTITY manusername  "catlee">
  <!ENTITY manucpackage "<refentrytitle>SPLITTAR</refentrytitle>">
  <!ENTITY manpackage   "splittar">
]>

<refentry>
  <refentryinfo>
    <address>
      &manemail;
    </address>
    <author>
      &manfirstname;
      &mansurname;
    </author>
    <copyright>
      <year>2006</year>
      <holder>&manusername;</holder>
    </copyright>
    &mandate;
  </refentryinfo>
  <refmeta>
    &manucpackage;

    &mansection;
  </refmeta>
  <refnamediv>
    <refname>&manpackage;</refname>

    <refpurpose>create multiple tar files</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <cmdsynopsis>
      <command>&manpackage;</command>

      <arg choice="opt">-h|--help</arg>
      <arg choice="opt">--version</arg>
      <arg choice="req">-f|--output <replaceable>outputfile</replaceable></arg>
      <arg choice="opt">-m|--maxsize <replaceable>maxsize</replaceable></arg>
      <arg choice="opt">-n|--numopen <replaceable>maxopen</replaceable></arg>
      <arg choice="opt">-r|--ratioweight <replaceable>weight</replaceable></arg>
      <arg choice="opt">-x|--dontapprox</arg>
      <arg choice="opt">-z|--gzip</arg>
      <arg choice="opt">-j|--bzip2</arg>
      <arg choice="opt">-p|--plain</arg>
      <arg choice="opt">-d|--debug</arg>
      <arg choice="opt">-v|--verbose</arg>
      <arg choice="opt">-q|--quiet</arg>
      <arg choice="opt">--profile</arg>
      <arg rep="repeat" choice="req"><replaceable>file</replaceable></arg>
    </cmdsynopsis>
  </refsynopsisdiv>
  <refsect1>
    <title>DESCRIPTION</title>

    <para><command>&manpackage;</command> allows you to create one or more
    tar files from a set of data where each of the generated tar files is
    less than a specified maximum size.

    Each tar file is a proper, self-contained tar file.  Other methods of
    backing up data to removable media requires a tar file to be split,
    making tar file n useless without files 1,...,n-1.</para>
  </refsect1>
  <refsect1>
    <title>OPTIONS</title>

    <para></para>

    <variablelist>
      <varlistentry>
        <term><option>-h</option>|<option>--help</option></term>
        <listitem>
          <para>Outputs a brief usage message and exits</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>--version</option></term>
        <listitem>
          <para>Outputs <command>&manpackage;</command>'s version and
          exits</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>-f</option>|<option>--output</option> <replaceable>outputfile</replaceable></term>
        <listitem>
          <para>You MUST specify either <option>-f</option> or
            <option>--output</option> to specify the name of the output tar
            file(s).  Output to standard output is NOT supported since there
            is no simple way to indicate where breaks between files would be.

            The files created by <command>&manpackage;</command> will be
            named according to this option, with a suffix appended to the
            portion before the filename extension indicating each file's
            position in the sequence.  See the EXAMPLES section below.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>-m</option>|<option>--maxsize</option> <replaceable>maxsize</replaceable></term>
        <listitem>
            <para>Specify how large each file generated by
                <command>&manpackage;</command> will be.  The size can be
                specified in bytes (by default).  You can also specify a
                number followed by one of the following suffixes:</para>
                <simplelist>
                    <member>KB = 1024 bytes</member>
                    <member>MB = 1024 KB</member>
                    <member>GB = 1024 MB</member>
                    <member>TB = 1024 GB</member>
                </simplelist>
                <para>One of the following units may also be used:</para>
                <simplelist>
                    <member>CD = 700 MB</member>
                    <member>CD650 = 650 MB</member>
                    <member>DVD = 4699979766 bytes</member>
                    <member>DVD3 = 1566572544 bytes</member>
                </simplelist>
                <para>DVD3 can be useful for creating files which fit onto
                a DVD.  The maximum file size for an ISO9660 filesystem is
                around 2GB, so the value for DVD3 was chosen to be less
                than 2GB and allow 3 of these files to fit onto a single
                layer DVD nicely.</para>
                <para>The default value is CD.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>-n</option>|<option>--numopen</option> <replaceable>maxopen</replaceable></term>
        <listitem>
            <para>How many tar files <command>&manpackage;</command> should
            keep open simultaneously.</para>
            <para>Keeping multiple tar files open simultaneously can make the
            resulting files more consistent in size.  When adding a file to
            the tar files, <command>&manpackage;</command> tries to
            determine if the file will fit in one of the output files.  If
            a file is too big for one output file, the next one is tried
            until either the file will fit, or until there are no more
            output files to try (in which case a new file is opened).  By
            keeping more files open, files can be created that are as close
            as possible to the maximum size.</para>
            <para>One side effect of this option is that files may appear
            out of order in the resulting tar files.  If this is a concern,
            set this option to 1.</para>
            <para>Setting this option to 0 means that
            <command>&manpackage;</command> will keep an unlimited number
            of tar files open.  The overhead per tar file is not that
            large, so this is the recommended setting.</para>
            <para>The default value is 0 (unlimited).</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>-r</option>|<option>--ratioweight</option> <replaceable>weight</replaceable></term>
        <listitem>
            <para>Sets the weight assigned to the estimated size of a file
            in the archive as calculated by multiplying the compression
            ratio to date by the file's actual size.
            
            A file's estimated size in the archive is used to determine if
            the file should be included in one of the open archives, or if
            a new archive should be started.  The estimated size is a
            weighted average between the actual file size, and the file
            size multiplied by the current compression ratio.  The ratio
            weight parameter controls how these values are combined.  A
            value of 0.0 means that the compression ratio has no influence
            on the estimated size at all (the estimated file size equals
            the actual file size).</para>
            <para>The default value is 1.0 (assume the current file will
            compress exactly as well as all the previous files)</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>-x</option>|<option>--dontapprox</option></term>
        <listitem>
            <para>Set the ratio weight to 0.0</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>-d</option>|<option>--debug</option></term>
        <listitem>
            <para>Print out debug output</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>-v</option>|<option>--verbose</option></term>
        <listitem>
            <para>Print out verbose output (less than debug)</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>-q</option>|<option>--quiet</option></term>
        <listitem>
            <para>Print out hardly anything</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>--profile</option></term>
        <listitem>
            <para>Generates profile data in a file called 'splittar.prof'
            in the current directory</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>file ...</option></term>
        <listitem>
          <para>List of files and/or directories to archive.</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>
  <refsect1>
    <title>RETURN VALUE</title>

    <para>Returns 0 on success</para>
    <para>Returns 1 when some files could not be added because access was
    denied</para>
    <para>Returns 2 when an output file could not be created</para>
    <para>Returns 254 on an uncaught exception</para>
    <para>Returns 255 when the program was interrupted</para>
  </refsect1>
  <!--
  <refsect1>
    <title>ERRORS</title>

    <para>Return codes, either exit status or errno settings.</para>
  </refsect1>
  -->
  <refsect1>
    <title>EXAMPLES</title>

    <para>splittar -f example.tgz -m CD /home
    
    will generate CD-sized files named example-1.tgz, example-2.tgz, etc.
    from the data contained in /home</para>
  </refsect1>
  <!--
  <refsect1>
    <title>ENVIRONMENT</title>

    <para>Environment variables this program might care about.</para>
  </refsect1>
  <refsect1>
    <title>FILES</title>

    <para>All files used by the program. Typical usage is like this:</para>

    <variablelist>
      <varlistentry>
        <term><filename>/usr/man</filename></term>
        <listitem><para>default man tree</para></listitem>
      </varlistentry>
      <varlistentry>
        <term><filename>/usr/man/man*/*.*</filename></term>
        <listitem><para>unformatted (nroff source) man pages</para></listitem>
      </varlistentry>
    </variablelist>
  </refsect1>
  -->
  <refsect1>
    <title>NOTES</title>

    <para><command>&manpackage;</command> may generate files larger than the
    specified maximum in some cases.  Currently it estimates how much a tar 
    file will grow based on the current compression ratio.  If the size of a
    candidate file multiplied by the current compression ratio added to the
    current size of the tar file would exceed the maximum size, then a new
    file is started.  If the candidate file does not compress at least as
    well as previous files, then the resulting tar file may be too large.</para>
    <para>In addition, the resuling tar file may be too large by a few
    kilobytes due to buffering in underlying libraries.</para>
    <para>In practise these issues have not been a problem.</para>
    <para>Future versions of <command>&manpackage;</command> will attempt
    to address these problems.</para>
  </refsect1>
  <refsect1>
    <title>CAVEATS</title>

    <para>At least one file will be included in each file.  Depending on
    the compression used, this could mean that the resulting file could
    exceed the specified maximum.
    
    Future versions of <command>&manpackage;</command> may address this by
    giving the option to split files that are too large.</para>
  </refsect1>
  <refsect1>
    <title>DIAGNOSTICS</title>

    <para><command>&manpackage;</command> will output warnings if any of the
    generated files exceed the maximum specified size.</para>
  </refsect1>
  <!--
  <refsect1>
    <title>BUGS</title>

    <para>Things that are broken or just don't work quite right.</para>
  </refsect1>
  <refsect1>
    <title>RESTRICTIONS</title>

    <para>Bugs you don't plan to fix. :-)</para>
  </refsect1>
  -->
  <refsect1>
    <title>AUTHOR</title>

    <para><author>&manfirstname;&mansurname;</author></para>
  </refsect1>
  <!--
  <refsect1>
    <title>HISTORY</title>

    <para>Programs derived from other sources sometimes have this.</para>
  </refsect1>
  -->
  <refsect1>
    <title>SEE ALSO</title>

    <para>tar(1)</para>
  </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:2
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:nil
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
